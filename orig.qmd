---
title: "Intro to Quarto"
author: "Jeremy McWilliams"
format: html
editor: visual
---

## What is Quarto?

Quarto is software that creates outputs (web pages, pdfs, dashboards, slides, books, etc.) allowing you to communicate your coding projects to your audience. Quarto works with:

-   R

-   Python

-   Julia

-   ObservableJS

Typically you do your work in one or more `.qmd` (Quarto Markdown) documents, and then you render your `.qmd` file(s) into your selected outputs. It's generally a good idea to try something, render, evaluate the output, and repeat.

Go ahead and click the Render button above, so we can see the unedited output of this file.

Let's look at the very top of this file. The section between the opening and closing `---` is called the YAML header (YAML: Yet Another Markup Language). This section includes important metadata, and includes configuration options for your Quarto file. Both the `title` and `author` field values display at the top of the rendered document, and the `format` field determines the type of output.

Make the following changes to the YAML header:

-   change the title to "All about Penguins"

-   change the author to your name

-   change the format to pdf

Now save and Render. What is different?

Specific formats can also have their own configuration rules. All the possibilities for html are listed [here](https://quarto.org/docs/output-formats/html-basics.html){target="_blank"}. For now, edit the YAML header again, so the format section looks like this:

``` yaml
format: 
  html: 
    toc: true
```

Render your file. Notice that there is now a table of contents section in your document, containing anchor links to section headers.

## Code Chunks

Just like in `.Rmd` files, Quarto documents have code chunks, where code is executed. Here's a basic example:

```{r}
#assigns the value
myVariable<-"popcorn"

#prints to screen
myVariable

```

When the document is rendered, each code chunk is executed.

By default, a rendered output will show both the code chunk, plus any output from running the code. You can change this behavior by using one or more of Quarto's [execution options](https://quarto.org/docs/computations/execution-options.html){target="_blank"}. Take a look at the chunk below:

```{r}
#| echo: false


plot(mtcars)



```

In the rendered document, the plot appears, but the code chunk does not.

One of Quarto's aims is to support multiple languages. Below is a python code chunk, which will run as long as the `reticulate` R package is installed:

```{python}

fruits = ["apple", "banana", "cherry"]
for x in fruits:
  print(x)


```

## Working with R Packages

When performing any kind of analysis in R, you'll often want to rely on the use of packages. Typically the sequence of events for installing and using a package in R is:

`install.packages("tidyverse")`

`library(tidyverse)`

In Quarto, you don't necessarily have to have `install.packages` in a code chunk in your Quarto document. As long as the package has already been installed in your environment (e.g. via the console), you should be fine.

The same isn't true for the `library` function - if you're using functions from an external package in your Quarto file, you must use the `library` function in a code chunk:

```{r}
#| warning: false
# the execution option above prevents the tidyverse conflicts warning from being rendered

library(tidyverse)
library(palmerpenguins)
library(gt)

```

## Plots: styling and other options

Quarto has a number of options for working with plots. You can add references to figures using this syntax:

@fig-flipperHist displays the distribution of flipper lengths among the sampled penguin data.

```{r}
#| label: fig-flipperHist
#| fig-cap: Distribution of Flipper Lengths
#| warning: false

ggplot(data=penguins, mapping=aes(x=flipper_length_mm))+
  geom_histogram()+
  labs(x="")



```

Layout
